[{"title":"about","href":"content/about.md","content":" title About Johnathan date 20190723T030318687Z draft false type page description About Johnathan Smith image Johnathan got started doing web development in the nonprofit world shortly after graduating from UNC He then learned about Laravel and its great ecosystem and adopted it rather quickly Hes been specializing in that for over four years which includes Vue as well Johnathan lives in Holly Springs NC with his beautiful amazing wife Sarah their adorable daughter Kristabelle and their newborn boy Levi Quirky fact one time while trekking through Iceland he ate puffin and whale He enjoys family time gardening trying new coffee blends and engineering awesome web applications Some other technologies that currently pique his interest are Go Python Asynchronous and parallel processing IoT"},{"title":"decorators-laravel-pipelines-multiple-parameters-constructors","href":"content/decorators-laravel-pipelines-multiple-parameters-constructors.md","content":" title Decorators and Laravel Pipelines with Multiple Parameters and Constructors subtitle An Alternative and Testable Way to Mutate Data with Laravels Service Container date 20190623T030318687Z draft false type post tags laravel PHP pipeline design pattern decorator description A Laravel specific trick sequentially manipulate data Allows for testable pipelines that utilize the service container and multiple parameters and constructors image cover httpspicsumphotosid1371376800 summary A Laravel specific trick sequentially manipulate data Allows for testable pipelines that utilize the service container and multiple parameters and constructors Laravels service containerhttpslaravelcomdocs58container is absolutely amazing I love leveraging it to make building apps easier This is a cool Laravel specific trick I have created which may come in handy for a lot of use cases It is a cross between the Laravel pipelinehttpsjeffochoameunderstandinglaravelpipelines and the decorator patternhttpslaracastscomseriesdesignpatternsinphpepisodes1 For me I had to continually edit data as if it were going through pipes or middleware however there were some gotchas I needed to Pass multiple parameters Initialize certain objects Have it be testable always Now with Laravel pipelines we can pass data amongst several objects and return it However we can only pass one piece of data or objecthttpsgithubcomilluminatepipelineblobmasterPipelinephpL59 For this example well be creating a series of classes that will edit a string and each class will be responsible for one function which will be contracted via an interface We will need to pass a Request object as well as a string The first thing we will want to do is create an interface that has a shared method amongst all these object Just like the standard Laravel pipeline but this time we will pass multiple parameters php use IlluminateHttpRequest interface EditsString public function editRequest request string str string Now lets create a couple object that transforms our data php class RemoveEmptyParagraphs implements EditsString public function editRequest request string str string Im breaking it apart for easier consumption You can reduce the number of variable assignments str strreplace str name requestgetname str name return str Awesome Now we can edit the string and pass it back But say we have another class that requires constructor parameters Well lets add that php class AddClosingStatements implements EditsString private object public function constructTimeStampObject object thisobject object public function editRequest request string str string str requestgetbyebye str thisgetSomething return str private function getTimestamp string return thisobjectgetTimestamp Now lets structure our main object We can do this by using a an array of class strings We can technically do this by injecting the constructors but imagine there were a lot of steps It can make things simpler this way php class StringMutations private request public function constructRequest request thisrequest request public function decorate string data foreachthisgetPipes as pipe data apppipeeditthisrequest data return data private function getPipes array put in as many classes as you need return RemoveEmptyParagraphsclass AddClosingStatementsclass Please note in the decorate function we are initializing the string outside the loop We are then using app to get the class from the service container And since we are using the same interface we just call the method on the initialized object Anything inside the constructor of these objects will automatically be initialized too So pretty cool right This method also makes classes infinitely testable Well use unit tests php class RemoveEmptyParagraphsTest extends TestCase public function testEdit removeEmptyParagraphs appRemoveEmptyParagraphsclass request request data beforeafter data removeEmptyParagraphseditrequest data thisassertEqualsbeforeafter data This will work with a series of steps especially if you need something like a pipeline andor decorator that has multiple parameters and constructors I think this has some advantages to the existing pipeline This is merely an alternative for certain cases Johnathan"},{"title":"laravel-pipeline-multiple-parameters-constructors","href":"content/laravel-pipeline-multiple-parameters-constructors.md","content":" title Laravel Pipeline With Multiple Parameters and Constructors subtitle Pass Data with Multiple Params and Differing Constructors date 20190723T030318687Z draft true type post tags laravel PHP pipeline design pattern description A Laravel specific trick to tame erratic functionality Allows for testable pipelines that utilize the service container and multiple params image This is a cool Laravel specific trick I have created which may come in handy for a lot of use cases It is a cross between the Laravel pipelinehttpsjeffochoameunderstandinglaravelpipelines and the decorator patternhttpslaracastscomseriesdesignpatternsinphpepisodes1 For me I had to continually edit data as if it were going through pipes or middleware however there were some gotchas I needed to Pass multiple parameters Initialize certain objects Potentially pass by reference Have it be testable always Now with Laravel pipelines we can pass data amongst several objects and return it However we can only pass one piece of data or objecthttpsgithubcomilluminatepipelineblobmasterPipelinephpL59 I want to pass multiple items one specifically would be a Request object Cool we can technically get this through a constructor with dependency injection so maybe we want to pass another item which has already been modified some sort of custom object The first thing we will want to do is create an interface that has a shared method amongst all these object Just like the standard Laravel pipeline but this time we will pass multiple parameters php interface EditsPipeline public function editRequest request array data array Now lets create an object that does stuff to our data php class DataEditor implements EditsPipeline public function editRequest request array data array datastuff requestgetparam1 return data Awesome Now we can edit the array and pass it back But say we have another class that requires constructor params Well lets add that php class DataManipulator implements EditsPipeline private object public function constructNecessaryObject object thisobject object public function editRequest request array data array datamorestuff requestgetparam2 dataotherstuff thisgetFunky return data private function getFunky array return thisobjectfunky null Woohoo Now we can get it from the injected item via the service container So how would something like this look like in a project Here ya go php class Items private request public function constructRequest request thisrequest request public function run array data foreachthisgetPipes as pipe data apppipeeditdata return data private function getPipes array put in as many classes as you need return DataEditorclass DataManipulatorclass Please note in the run function we are initializing the array outside the loop We are then using app to get the class from the service container And since we are using the same interface we just call the method on the initialized object Anything inside the constructor of these objects will automatically be initialized too If you need super custom controller then this technique may not work for you A quick optimization If you have a BUNCH of long arrays that may be taking up a lot of memory it may be best to pass by reference php interface EditsPipeline public function editRequest request array data void So pretty cool right This method also makes classes infinitely testable Well use unit tests php class DataManipulatorTest extends TestCase public function testEdit dataManipulator appDataManipulatorclass request request data data dataManipulatoreditrequest data thisassertIsArraydata thisassertArrayHasKeymorestuff data thisassertArrayHasKeyotherstuff data thisassertNotEmptydatamorestuff So you may not need this It may be a bit overkill When possible its best to create objects and do things via object oriented programming methodology However if there are a series of steps where things may be erratic this technique may be helpful Johnathan"},{"title":"resume","href":"content/resume.md","content":" title Resume date 20190723T030318687Z draft false type page description Resume for Johnathan Smith image Selfmotivated detail oriented Software Engineer with extensive experience in multiple languages and stacks including PHP Laravel JavaScriptVue Relational and NoSQL databases HTML CSS and more Exhibits superior communication skills and the ability to collaborate across departments Excels at engineering modular testable objectoriented applications for assorted business specifications Highly proficient at turning concepts into critical services and applications CORE COMPETENCIES PHP Laravel PHPUnit TDD MochaChai Jest Vue JavaScript ES6 RESTful API Creation Legacy Refactoring MySQL Relational Databases Git Version Control Single Page Applications Object Oriented Programming DockerDocker Compose Troubleshooting Admin PROFESSIONAL EXPERIENCE Bisnow 2018 PresentSoftware Engineer Working 100 remotely to create vital enterpriselevel web applications that serve tens of thousands of customers daily and is utilized by a staff of nearly 100 Excels at clearly understanding and communicating technical information in both written and oral form Involved with all aspects of the software development cycle from requirements gathering design implementation testing and all the way through maintenance Craft Google Ad Manager applications using PHP backend and a VueJS frontend that syncs with an expansive and robust custommade email system that uses jobs queues commands Redis and more Demonstrated ability to refine tune and automate regular processes track issues and document changes via approved change guidelines Generated unit tests to validate proper functioning of apps for backend with PHPUnit and front end with MochaChai and Jest Measures health and performance of custommade applications Wake Tech Community College 2018Applications Developer III In charge of rewriting and maintaining the Workforce Continuing Education applications which serves thousands of users and requests daily Overhaul various legacy applications to modern standards of PHP Laravel and JavaScript Convert existing applications to the Laravel PHP framework Utilized Vuejs to inject interactivity for frontend facing apps alongside an SPAAPI NC State University 2015 2018Web Mobile Application Developer Collaborated across departments to produce websites and web apps for college departments and national research centers Employed both frontend and backend development to create professionalquality sites and applications that function flawlessly increase web presence and boost brand awareness Engineered various MVC applications with PHP and Laravel Utilized OOP principles to construct applications Collaborates with clients and professionals to turn nebulous ideas into fullfledged products and applications Served as the point of contact for several organizations for ongoing support Civitas Institute 2008 2015Full Stack Web Developer Directed and completed largescale web design and production using jQuery JavaScript PHP WordPress and MySQL to enhance user experience increase conversion rates and boost viewership EDUCATION Bachelor of Arts in Communications 2007 University of North Carolina at Chapel Hill Chapel Hill North Carolina High School Diploma 2003 Cary Academy Cary NC"}]